import {app, BrowserWindow, ipcMain, shell} from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
import dbAPI from "./data-layer/db-api";
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;



// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


ipcMain.handle("READ_SHELTERS", (event, arg: any) => {
 return new Promise(function(resolve, reject) {
    // do stuff
   try {
     const shelters = dbAPI.readShelters();
     console.log("SHELTERS:", shelters);
     resolve(shelters);
   } catch(err){
      console.log(err);
      reject("this didn't work!");
    }
  });
});

ipcMain.handle("OPEN_IN_DEFAULT_BROWSER", (event, url: string) => {
  return new Promise(function(resolve, reject) {
    // do stuff
    try {
      shell.openExternal(url);
      resolve("opened in default browser");
    } catch(err){
      console.log(err);
      reject("this didn't work!");
    }
  });
});

ipcMain.handle("UPDATE_SHELTER", (event, shelter: Shelter) => {
  return new Promise(function(resolve, reject) {
    try {
      if (!shelter.id) {
        reject("shelter must have an ID");
      }
      const myShelter = dbAPI.updateShelter(shelter);
      console.log("UPDATING SHELTER:", JSON.stringify(shelter));
      resolve(myShelter);
    } catch(err){
      console.log(err);
      reject("this didn't work!");
    }
  });
});

ipcMain.handle("CREATE_SHELTER", (event, shelter: Shelter) => {
  return new Promise(function(resolve, reject) {
    try {
      const myShelter = dbAPI.insertShelter(shelter);
      console.log("UPDATING SHELTER:", JSON.stringify(shelter));
      resolve(myShelter);
    } catch(err){
      console.log(err);
      reject("this didn't work!");
    }
  });
});

ipcMain.handle("DELEte_SHELTER", (event, shelter: Shelter) => {
  return new Promise(function(resolve, reject) {
    try {
      const myResults = dbAPI.deleteShelter(shelter);
      console.log("DELETING SHELTER:", JSON.stringify(shelter));
      resolve(myResults);
    } catch(err){
      console.log(err);
      reject("this didn't work!");
    }
  });
});